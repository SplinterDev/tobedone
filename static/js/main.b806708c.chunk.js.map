{"version":3,"sources":["data.ts","hooks/useLocalStorage.ts","providers/TasksProvider.tsx","providers/GlobalStateProvider.tsx","providers/AlertsProvider.tsx","utils/alerts.ts","components/TdKeyIcon/TdKeyIcon.tsx","components/TaskInput/TaskInput.tsx","components/AlertArea/AlertArea.tsx","components/TdCheck/TdCheck.tsx","components/TaskItem/TaskItemMenu.tsx","components/TaskItem/TaskItem.tsx","components/TaskList/TaskList.tsx","components/Colors/Colors.tsx","components/App/App.tsx","components/Clock/Clock.tsx","components/Header/HeaderMenu.tsx","components/Header/Header.tsx","components/Body/Body.tsx","index.tsx"],"names":["staticTasks","id","uuidv4","description","done","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","e","console","error","storedValue","setStoredValue","value","setItem","stringify","TasksContext","React","createContext","useTasksContext","tasks","useContext","update","TasksProvider","children","tasksStorage","setTasksStorage","setTasks","useEffect","Provider","initialGlobalState","editingTask","GlobalStateContext","useGlobalStateContext","globalState","GlobalStateProvider","setGlobalState","prevState","AlertsContext","useAlertsContext","alerts","AlertsProvider","setAlerts","createAlert","message","TdKeyIcon","keyName","onClick","className","TaskInput","setAlertsContext","setValue","setEditingTask","inputRef","useRef","current","focus","setAlert","alert","oldQueue","handleEnter","oldTasks","map","length","newTask","saveNewTask","handleEsc","blur","icon","faAlignLeft","ref","type","placeholder","onKeyDown","onChange","target","AlertArea","alertsContext","oldIds","elem","newIds","filter","includes","oldAlerts","setTimeout","AnimatePresence","motion","div","initial","x","opacity","animate","exit","TdCheck","checked","size","isChecked","setIsChecked","prev","style","fontSize","faCheck","TaskItemMenu","show","task","isConfirm","setIsConfirm","faExclamationTriangle","prevTasks","faTimes","faEdit","faTrashAlt","TaskItem","showMenu","setShowMenu","li","onMouseEnter","onMouseLeave","old","t","TaskList","Colors","App","display","Clock","Date","interval","setInterval","clearInterval","Intl","DateTimeFormat","timeStyle","hour12","format","HeaderMenu","onChangeLabel","onClickAbout","clearLabel","faCheckDouble","faQuestion","Header","label","setLabel","Body","showAbout","setShowAbout","prevAbout","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"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","file":"static/js/main.b806708c.chunk.js","sourcesContent":["import { TaskType } from './models/types'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const staticTasks: TaskType[] = [\n  {\n    id: uuidv4(),\n    description:\n      'Add new tasks by typing in the input and confirm by pressing Enter',\n    done: true,\n  },\n  {\n    id: uuidv4(),\n    description: 'Mark your tasks as completed by checking the box',\n    done: true,\n  },\n  {\n    id: uuidv4(),\n    description:\n      'Delete or edit old tasks by hovering them and clicking the icons on the right',\n    done: true,\n  },\n  {\n    id: uuidv4(),\n    description: 'Cancel an edition by pressing Esc, or save by pressing Enter',\n    done: false,\n  },\n]\n","import { useState } from 'react'\n\nconst useLocalStorage = <T>(\n  key: string,\n  initialValue: T,\n): [T, (value: T) => void] => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? JSON.parse(item) : initialValue\n    } catch (e) {\n      console.error(e)\n      return initialValue\n    }\n  })\n\n  const setValue = (value: T) => {\n    setStoredValue(value)\n    window.localStorage.setItem(key, JSON.stringify(value))\n  }\n\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n","import React, { useContext, useEffect, useState } from 'react'\nimport { TaskType } from '../models/types'\nimport { ContextSetterType, ContextType } from './providers'\nimport { staticTasks } from '../data'\nimport useLocalStorage from '../hooks/useLocalStorage'\n\nconst TasksContext = React.createContext<ContextType<TaskType[]>>({ value: [] })\n\nexport const useTasksContext = (): [\n  TaskType[],\n  ContextSetterType<TaskType[]> | undefined,\n] => {\n  const tasks = useContext(TasksContext)\n  return [tasks.value, tasks.update]\n}\nexport const useTasks = (): TaskType[] => {\n  const tasks = useContext(TasksContext)\n  return tasks.value\n}\n\ntype Props = {\n  children: React.ReactNode\n}\n\nconst TasksProvider = ({ children }: Props): JSX.Element => {\n  const [tasksStorage, setTasksStorage] = useLocalStorage<TaskType[]>(\n    'tobedone-tasks',\n    staticTasks,\n  )\n  const [tasks, setTasks] = useState<TaskType[]>(tasksStorage)\n\n  useEffect(() => {\n    setTasksStorage(tasks)\n  }, [tasks])\n\n  return (\n    <TasksContext.Provider value={{ value: tasks, update: setTasks }}>\n      {children}\n    </TasksContext.Provider>\n  )\n}\n\nexport default TasksProvider\n","import React, { useContext, useState } from 'react'\nimport { TaskType } from '../models/types'\n\ntype GlobalStateType = {\n  editingTask: TaskType | null\n}\n\ntype GlobalStateContextType = {\n  value: GlobalStateType\n  update?: <T>(key: string, value: T) => void\n}\n\nconst initialGlobalState: GlobalStateType = {\n  editingTask: null,\n}\n\nconst GlobalStateContext = React.createContext<GlobalStateContextType>({\n  value: initialGlobalState,\n})\n\nexport const useGlobalStateContext = (): [\n  GlobalStateType,\n  (<T>(key: string, value: T) => void) | undefined,\n] => {\n  const globalState = useContext(GlobalStateContext)\n  return [globalState.value, globalState.update]\n}\n\ntype Props = {\n  children: React.ReactNode\n}\n\nconst GlobalStateProvider = ({ children }: Props): JSX.Element => {\n  const [globalState, setGlobalState] = useState<GlobalStateType>(\n    initialGlobalState,\n  )\n\n  const handleUpdate = <T,>(key: string, value: T): void => {\n    setGlobalState((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }))\n  }\n\n  return (\n    <GlobalStateContext.Provider\n      value={{ value: globalState, update: handleUpdate }}\n    >\n      {children}\n    </GlobalStateContext.Provider>\n  )\n}\n\nexport default GlobalStateProvider\n","import React, { useContext, useState } from 'react'\nimport { Alert } from '../models/types'\nimport { ContextSetterType, ContextType } from './providers'\n\nconst AlertsContext = React.createContext<ContextType<Alert[]>>({ value: [] })\n\nexport const useAlertsContext = (): [\n  Alert[],\n  ContextSetterType<Alert[]> | undefined,\n] => {\n  const alerts = useContext(AlertsContext)\n  return [alerts.value, alerts.update]\n}\nexport const useAlerts = (): Alert[] => {\n  const alerts = useContext(AlertsContext)\n  return alerts.value\n}\n\ntype Props = {\n  children: React.ReactNode\n}\n\nconst AlertsProvider = ({ children }: Props): JSX.Element => {\n  const [alerts, setAlerts] = useState<Alert[]>([])\n\n  return (\n    <AlertsContext.Provider value={{ value: alerts, update: setAlerts }}>\n      {children}\n    </AlertsContext.Provider>\n  )\n}\n\nexport default AlertsProvider\n","import { v4 as uuidv4 } from 'uuid'\nimport { Alert } from '../models/types'\n\nexport const createAlert = (message: string): Alert => ({\n  message,\n  id: uuidv4(),\n})\n","import React from 'react'\nimport './TdKeyIcon.scss'\n\ninterface Props {\n  keyName: string\n  onClick: () => void\n}\n\nconst TdKeyIcon = ({ keyName, onClick }: Props): JSX.Element => {\n  return (\n    <div onClick={onClick} className=\"TdKeyIcon\">\n      <div className=\"container\">{keyName}</div>\n    </div>\n  )\n}\n\nexport default TdKeyIcon\n","import { faAlignLeft } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { useTasksContext } from '../../providers/TasksProvider'\nimport './TaskInput.scss'\nimport { v4 as uuidv4 } from 'uuid'\nimport { useGlobalStateContext } from '../../providers/GlobalStateProvider'\nimport { Alert, TaskType } from '../../models/types'\nimport { useAlertsContext } from '../../providers/AlertsProvider'\nimport { createAlert } from '../../utils/alerts'\nimport TdKeyIcon from '../TdKeyIcon/TdKeyIcon'\n\nconst TaskInput = (): JSX.Element => {\n  const [globalState, setGlobalState] = useGlobalStateContext()\n  const [, setAlertsContext] = useAlertsContext()\n  const [, setTasks] = useTasksContext()\n\n  const [value, setValue] = useState('')\n  const [editingTask, setEditingTask] = useState<TaskType | null>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    if (globalState.editingTask) {\n      setEditingTask(globalState.editingTask)\n      setValue(globalState.editingTask.description)\n      inputRef?.current?.focus()\n    }\n  }, [globalState])\n\n  const setAlert = (alert: Alert) => {\n    setAlertsContext && setAlertsContext((oldQueue) => [...oldQueue, alert])\n  }\n\n  const saveNewTask = () => {\n    if (!value.length) return\n\n    const newTask = {\n      id: uuidv4(),\n      description: value,\n      done: false,\n    }\n\n    setTasks && setTasks((oldTasks) => [...oldTasks, newTask])\n    setAlert(createAlert('Task created'))\n  }\n\n  const saveEditedTask = () => {\n    setTasks &&\n      setTasks((oldTasks) =>\n        oldTasks.map((item) => {\n          if (item.id !== editingTask?.id) return item\n          return { ...item, description: value }\n        }),\n      )\n    setEditingTask(null)\n    setGlobalState && setGlobalState('editingTask', null)\n    setAlert(createAlert('Task edited'))\n  }\n\n  const handleEnter = () => {\n    if (editingTask) {\n      saveEditedTask()\n    } else {\n      saveNewTask()\n    }\n    setValue('')\n  }\n\n  const handleEsc = () => {\n    if (editingTask) {\n      setEditingTask(null)\n      setAlert(createAlert('Editing canceled'))\n    }\n    setValue('')\n    inputRef?.current?.blur()\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') return handleEnter()\n    if (e.key === 'Escape') return handleEsc()\n  }\n\n  return (\n    <div className=\"TaskInput\">\n      <Icon className=\"icon\" icon={faAlignLeft} />\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder=\"Add a task...\"\n        onKeyDown={handleKeyPress}\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <div className=\"key-icons\">\n        <TdKeyIcon onClick={handleEsc} keyName=\"Esc\" />\n        <TdKeyIcon onClick={handleEnter} keyName=\"Enter\" />\n      </div>\n    </div>\n  )\n}\n\nexport default TaskInput\n","import React, { useEffect, useState } from 'react'\nimport './AlertArea.scss'\nimport { Alert } from '../../models/types'\nimport { useAlertsContext } from '../../providers/AlertsProvider'\nimport { AnimatePresence, motion } from 'framer-motion'\n\nconst AlertArea = (): JSX.Element => {\n  const [alerts, setAlerts] = useState<Alert[]>([])\n  const [alertsContext, setAlertsContext] = useAlertsContext()\n\n  useEffect(() => {\n    const oldIds = alerts.map((elem) => elem.id)\n    const newIds = alertsContext\n      .map((elem) => elem.id)\n      .filter((elem) => !oldIds.includes(elem))\n\n    if (!newIds.length) return\n\n    // add alert to local queue\n    setAlerts((oldAlerts) => [...oldAlerts, ...alertsContext])\n    // remove from global queue\n    setAlertsContext &&\n      setAlertsContext((oldQueue) =>\n        oldQueue.filter((elem) => !newIds.includes(elem.id)),\n      )\n\n    newIds.map((id) => {\n      setTimeout(() => {\n        setAlerts((oldQueue) => oldQueue.filter((elem) => elem.id !== id))\n      }, 5000)\n    })\n  }, [alertsContext])\n\n  return (\n    <div className=\"AlertArea\">\n      <AnimatePresence>\n        {alerts.map((alert) => (\n          <motion.div\n            key={alert.id}\n            initial={{ x: -25, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            exit={{ x: 25, opacity: 0 }}\n          >\n            {alert.message}\n          </motion.div>\n        ))}\n      </AnimatePresence>\n    </div>\n  )\n}\n\nexport default AlertArea\n","import React, { useState } from 'react'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\nimport './TdCheck.scss'\n\ninterface Props {\n  checked: boolean\n  size?: number\n  onClick?: () => void\n}\n\nconst TdCheck = ({ checked, size = 1, onClick }: Props): JSX.Element => {\n  const [isChecked, setIsChecked] = useState(checked)\n\n  const handleClick = () => {\n    setIsChecked((prev) => !prev)\n    onClick && onClick()\n  }\n\n  return (\n    <div\n      className=\"TdCheck\"\n      onClick={handleClick}\n      style={{ fontSize: `${size - 0.3}rem` }}\n    >\n      {isChecked && (\n        <Icon style={{ fontSize: `${size - 0.3}rem` }} icon={faCheck} />\n      )}\n    </div>\n  )\n}\n\nexport default TdCheck\n","import React, { useState } from 'react'\nimport {\n  faCheck,\n  faEdit,\n  faExclamationTriangle,\n  faTimes,\n  faTrashAlt,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport './TaskItemMenu.scss'\nimport { TaskType } from '../../models/types'\nimport { useTasksContext } from '../../providers/TasksProvider'\nimport { useGlobalStateContext } from '../../providers/GlobalStateProvider'\nimport { useAlertsContext } from '../../providers/AlertsProvider'\nimport { createAlert } from '../../utils/alerts'\nimport { AnimatePresence, motion } from 'framer-motion'\n\ntype Props = {\n  show: boolean\n  task: TaskType\n}\n\nconst TaskItemMenu = ({ show, task }: Props): JSX.Element => {\n  const [, setAlertsContext] = useAlertsContext()\n  const [, setGlobalState] = useGlobalStateContext()\n  const [, setTasks] = useTasksContext()\n  const [isConfirm, setIsConfirm] = useState(false)\n\n  const handleEdit = () => {\n    setGlobalState && setGlobalState('editingTask', task)\n  }\n\n  const handleDelete = () => {\n    setIsConfirm(true)\n  }\n\n  const handleCancel = () => {\n    setIsConfirm(false)\n  }\n\n  const handleConfirm = () => {\n    setTasks &&\n      setTasks((prevTasks) => prevTasks.filter((item) => item.id !== task.id))\n    setIsConfirm(false)\n\n    setAlertsContext &&\n      setAlertsContext((oldQueue) => [...oldQueue, createAlert('Task deleted')])\n  }\n\n  return (\n    <AnimatePresence>\n      {isConfirm ? (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"TaskItemMenu dialog\"\n        >\n          <Icon className=\"icon show alert\" icon={faExclamationTriangle} />\n          <span>Delete?</span>\n\n          <Icon\n            className=\"icon show yes\"\n            onClick={handleConfirm}\n            icon={faCheck}\n          />\n          <Icon\n            className=\"icon show no\"\n            onClick={handleCancel}\n            icon={faTimes}\n          />\n        </motion.div>\n      ) : (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"TaskItemMenu\"\n        >\n          <Icon\n            className={`menu-icon ${!show || 'show'}`}\n            onClick={handleEdit}\n            icon={faEdit}\n          />\n          <Icon\n            className={`menu-icon ${!show || 'show'}`}\n            onClick={handleDelete}\n            icon={faTrashAlt}\n          />\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n\nexport default TaskItemMenu\n","import React, { useState } from 'react'\nimport './TaskItem.scss'\nimport TdCheck from '../TdCheck/TdCheck'\nimport { TaskType } from '../../models/types'\nimport { useTasksContext } from '../../providers/TasksProvider'\nimport TaskItemMenu from './TaskItemMenu'\nimport { motion } from 'framer-motion'\n\ninterface Props {\n  task: TaskType\n}\n\nconst TaskItem = ({ task }: Props): JSX.Element => {\n  const [, setTasks] = useTasksContext()\n  const [showMenu, setShowMenu] = useState(false)\n\n  const handleClick = () => {\n    setTasks &&\n      setTasks((old) =>\n        old.map((t) => (t.id === task.id ? { ...t, done: !t.done } : t)),\n      )\n  }\n\n  return (\n    <motion.li\n      //https://codesandbox.io/s/framer-motion-drag-to-reorder-pkm1k?file=/src/Example.tsx:102-116\n      // drag\n      // dragConstraints={{ left: 0, right: 0 }}\n      // dragElastic={0.2}\n      // dragMomentum={false}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"TaskItem\"\n      onMouseEnter={() => setShowMenu(true)}\n      onMouseLeave={() => setShowMenu(false)}\n    >\n      <TdCheck checked={task.done} onClick={handleClick} />\n      <div className=\"content\">{task.description}</div>\n      {showMenu && <TaskItemMenu show={showMenu} task={task} />}\n    </motion.li>\n  )\n}\n\nexport default TaskItem\n","import { AnimatePresence } from 'framer-motion'\nimport React from 'react'\nimport { useTasks } from '../../providers/TasksProvider'\nimport AlertArea from '../AlertArea/AlertArea'\nimport TaskItem from '../TaskItem/TaskItem'\nimport './TaskList.scss'\n\nconst TaskList = (): JSX.Element => {\n  const tasks = useTasks()\n\n  return (\n    <div className=\"TaskList\">\n      <AlertArea />\n      <AnimatePresence>\n        <ul>\n          {tasks.map((e) => (\n            <TaskItem task={e} key={e.id} />\n          ))}\n        </ul>\n      </AnimatePresence>\n    </div>\n  )\n}\n\nexport default TaskList\n","import React from 'react'\nimport './Color.scss'\n\nconst Colors = (): JSX.Element => {\n  return (\n    <div className=\"Color\">\n      <div className=\"color black\">black</div>\n      <div className=\"color charcoal\">charcoal</div>\n      <div className=\"color anchor\">anchor</div>\n      <div className=\"color smoke\">smoke</div>\n      <div className=\"color white\">white</div>\n    </div>\n  )\n}\n\nexport default Colors\n","import React from 'react'\nimport './App.scss'\nimport TaskInput from '../TaskInput/TaskInput'\nimport TaskList from '../TaskList/TaskList'\nimport Colors from '../Colors/Colors'\nimport GlobalStateProvider from '../../providers/GlobalStateProvider'\nimport AlertsProvider from '../../providers/AlertsProvider'\n\nfunction App(): JSX.Element {\n  return (\n    <GlobalStateProvider>\n      <AlertsProvider>\n        <div id=\"App\">\n          <TaskInput />\n          <TaskList />\n          <div style={{ display: 'none' }}>\n            <Colors />\n          </div>\n        </div>\n      </AlertsProvider>\n    </GlobalStateProvider>\n  )\n}\n\nexport default App\n","import React, { useEffect, useState } from 'react'\nimport './Clock.scss'\n\nconst Clock = (): JSX.Element => {\n  const [value, setValue] = useState(new Date())\n  useEffect(() => {\n    const interval = setInterval(() => setValue(new Date()), 1000)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n\n  return (\n    <div className=\"Clock\">\n      {new Intl.DateTimeFormat('en', {\n        timeStyle: 'medium',\n        hour12: false,\n      }).format(value)}\n    </div>\n  )\n}\n\nexport default Clock\n","import React, { useState } from 'react'\nimport './HeaderMenu.scss'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport {\n  faCheck,\n  faCheckDouble,\n  faQuestion,\n  faTimes,\n  faTrashAlt,\n} from '@fortawesome/free-solid-svg-icons'\nimport { useTasksContext } from '../../providers/TasksProvider'\n\ntype Props = {\n  onChangeLabel: (label: string | null) => void\n  onClickAbout: () => void\n}\n\nconst HeaderMenu = ({ onChangeLabel, onClickAbout }: Props): JSX.Element => {\n  const [isConfirm, setIsConfirm] = useState(false)\n  const [, setTasks] = useTasksContext()\n\n  const clearLabel = () => {\n    onChangeLabel(null)\n  }\n\n  const clearChecked = () => {\n    setTasks && setTasks((oldTasks) => oldTasks.filter((task) => !task.done))\n  }\n\n  const clearAll = () => {\n    setTasks && setTasks([])\n  }\n\n  return !isConfirm ? (\n    <div className=\"HeaderMenu\">\n      <Icon\n        className=\"menu-icon\"\n        icon={faQuestion}\n        onMouseEnter={() => onChangeLabel('About')}\n        onMouseLeave={clearLabel}\n        onClick={onClickAbout}\n      />\n      <Icon\n        className=\"menu-icon\"\n        icon={faTrashAlt}\n        onClick={() => setIsConfirm(true)}\n        onMouseEnter={() => onChangeLabel('Delete all')}\n        onMouseLeave={clearLabel}\n      />\n    </div>\n  ) : (\n    <div\n      className=\"HeaderMenu\"\n      onMouseLeave={() => {\n        setIsConfirm(false)\n        clearLabel()\n      }}\n    >\n      <Icon\n        className=\"menu-icon\"\n        icon={faCheckDouble}\n        onMouseEnter={() => onChangeLabel('All')}\n        onMouseLeave={() => onChangeLabel('Delete?')}\n        onClick={() => {\n          clearAll()\n          setIsConfirm(false)\n          clearLabel()\n        }}\n      />\n      <Icon\n        className=\"menu-icon\"\n        icon={faCheck}\n        onMouseEnter={() => onChangeLabel('Checked')}\n        onMouseLeave={() => onChangeLabel('Delete?')}\n        onClick={() => {\n          clearChecked()\n          setIsConfirm(false)\n          clearLabel()\n        }}\n      />\n      <Icon\n        className=\"menu-icon\"\n        icon={faTimes}\n        onMouseEnter={() => onChangeLabel('Cancel')}\n        onMouseLeave={() => onChangeLabel('Delete?')}\n        onClick={() => {\n          setIsConfirm(false)\n          clearLabel()\n        }}\n      />\n    </div>\n  )\n}\n\nexport default HeaderMenu\n","import React, { useState } from 'react'\nimport Clock from '../Clock/Clock'\nimport './Header.scss'\nimport HeaderMenu from './HeaderMenu'\n\ntype Props = {\n  onClickAbout: () => void\n}\n\nconst Header = ({ onClickAbout }: Props): JSX.Element => {\n  const [label, setLabel] = useState<string | null>(null)\n\n  return (\n    <div className=\"Header\">\n      <h1>To Be Done</h1>\n      <aside>\n        {label ? <div className=\"label\">{label}</div> : <Clock />}\n        <HeaderMenu onChangeLabel={setLabel} onClickAbout={onClickAbout} />\n      </aside>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useState } from 'react'\nimport TasksProvider from '../../providers/TasksProvider'\nimport App from '../App/App'\nimport Header from '../Header/Header'\nimport './Body.scss'\n\nconst Body = (): JSX.Element => {\n  const [showAbout, setShowAbout] = useState(false)\n\n  return (\n    <div className=\"Body\">\n      <TasksProvider>\n        <Header onClickAbout={() => setShowAbout((prevAbout) => !prevAbout)} />\n        {showAbout ? (\n          <div>\n            <p>\n              <b>To Be Done</b> is a simple to do list app that stores your\n              tasks locally, in the browser. That is, if you clear your cache,\n              your tasks will be lost.\n            </p>\n\n            <p>\n              It&apos;s a simple app that I created for fun, to exercise some\n              skills, but that can also be pretty useful.\n            </p>\n\n            <p>It was developed using React and Typescript.</p>\n          </div>\n        ) : (\n          <App />\n        )}\n      </TasksProvider>\n    </div>\n  )\n}\n\nexport default Body\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Body from './components/Body/Body'\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Body />\n    <footer>\n      <p>\n        &copy; <a href=\"https://github.com/SplinterDev\">@SplinterDev</a> 2021\n      </p>\n      <p>\n        <a href=\"https://github.com/SplinterDev/tobedone/blob/master/LICENSE\">\n          Terms of Service\n        </a>\n      </p>\n      <p>\n        <a href=\"https://github.com/SplinterDev/tobedone\">\n          This repository on GitHub\n        </a>\n      </p>\n    </footer>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}